package org.metadatacenter.archetype;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;

/**
 * Take a jsonschema2pojo-generated Java class generated from a CEDAR template and write a template instance
 * conforming to that template.
 */
public class TemplateInstanceWriter
{
  static ObjectMapper mapper = new ObjectMapper();

  public static void main(String[] argc) throws IOException
  {
    File outputTemplateInstanceFile = File.createTempFile("studyTemplateInstance", ".json");
    File studyTemplateFile = new File(
      TemplateInstanceWriter.class.getClassLoader().getResource("./json-schema/StudyTemplate.json").getFile());

    StudyTemplate study = new StudyTemplate();

    study.setSchemaIsBasedOn(getTemplateID(studyTemplateFile));
    study.setSchemaName("Study Instance 1");
    study.setSchemaDescription("Study Instance generated by TemplateInstanceWriter");

    StudyName studyName = new StudyName();
    studyName.setValue("SDY32");
    study.setStudyName(studyName);

    Disease disease = new Disease();
    disease.setValue("a disease");
    study.setDisease(disease);

    Organism organism = new Organism();
    organism.setValue("an organism");
    study.setOrganism(organism);

    Institution institution = new Institution();
    study.setInstitution(institution);

    InstitutionName institutionName = new InstitutionName();
    institutionName.setValue("Stanford");
    institution.setInstitutionName(institutionName);
    ;

    Address address = new Address();
    institution.setAddress(address);

    Address1 address1 = new Address1();
    address1.setValue("BMIR");
    address.setAddress1(address1);

    Address2 address2 = new Address2();
    address2.setValue("MSOB");
    address.setAddress2(address2);

    Town town = new Town();
    town.setValue("Stanford");
    address.setTown(town);

    ZIPPostalCode zipPostalCode = new ZIPPostalCode();
    zipPostalCode.setValue("94305");
    address.setZIPPostalCode(zipPostalCode);

    Country country = new Country();
    country.setValue("USA");
    address.setCountry(country);

    List<Publication> publications = new ArrayList<>();
    study.setPublication(publications);

    Publication publication = new Publication();
    List<Author> authors = new ArrayList<>();
    publication.setAuthor(authors);
    Author author = new Author();
    author.setValue("An author");
    authors.add(author);

    mapper.writeValue(outputTemplateInstanceFile, study);

    System.out.print("Instance written to file " + outputTemplateInstanceFile.getAbsolutePath());
  }

  private static URI getTemplateID(File studyTemplateFile) throws IOException
  {
    JsonNode node = mapper.readValue(studyTemplateFile, JsonNode.class);
    return URI.create(node.get("@id").asText());
  }
}
